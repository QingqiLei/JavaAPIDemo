package generic.genericinterface;

import generic.genericinterface.specificcoffee.*;

import java.lang.reflect.InvocationTargetException;
import java.util.Iterator;
import java.util.Random;

public class CoffeeGenerator implements Generator<Coffee>, Iterable<Coffee> {
    private Class[] types = {Latte.class, Breve.class, Mocha.class, Cappuccino.class, Americano.class};
    private static Random rand = new Random(47);

    private int size = 0;   // the number of the Coffee generated by next() method

    public CoffeeGenerator() {
    }

    public CoffeeGenerator(int size) {
        this.size = size;
    }

    @Override
    public Coffee nect() {
        try {
            return (Coffee) types[rand.nextInt(types.length)].getConstructor().newInstance();

        } catch (IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }


    class CoffeeInterator implements Iterator<Coffee> {
        int count = size;

        @Override
        public boolean hasNext() {
            return count > 0;

        }

        @Override
        public Coffee next() {
            count--;
            return CoffeeGenerator.this.nect();
        }
    }

    @Override
    public Iterator<Coffee> iterator() {
        return new CoffeeInterator();
    }

    public static void main(String[] args){
        CoffeeGenerator gen = new CoffeeGenerator();
        for(int i = 0; i < 5; i ++)
            System.out.println(gen.nect());
        System.out.println("+++++");

        for(Coffee c : new CoffeeGenerator(5)) // this works after implements Iterable
            System.out.println(c);
    }
}
